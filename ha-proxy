#!/bin/bash

if [ ! -e "$HOME/.ha_env" ]; then
    touch "$HOME/.ha_env"
fi

source "$HOME/.ha_env"

# global
author="Raja Rakotonirina <raja.rakoto7@gmail.com>"
description="Streamlines the configuration and management of proxy tunnels, leveraging HA Tunnel Plus for services like HTTP, Git, VSCode and SSH. 🖧"
version="v1.1.4"

# files
ha_vscode="$HA_VSCODE"
ha_gitconfig="$HA_GITCONFIG"
ha_sshauth="$HA_SSHAUTH"
ha_sshconfig="$HA_SSHCONFIG"
ha_env="$HA_ENV"

# [features] ============================

function ha_start() {
    # define
    local ha_proxy="$HA_PROXY"
    local ha_port="$HA_PORT"
    local ha_ssh_port="$HA_SSH_PORT"
    local ha_username="$HA_USERNAME"
    local ha_password="$HA_PASSWORD"
    local ha_encoded_password=$(ex_urlencode "$ha_password")
    
    # check
    if [ -z "$ha_proxy" ] || [ -z "$ha_port" ] || [ -z "$ha_ssh_port" ] || [ -z "$ha_username" ] || [ -z "$ha_password" ] || [ -z "$ha_encoded_password" ]; then
        akory -d 0.02 "error: some required variables are not set ! ___ 😢"
        exit 1
    fi
    if ! [[ "$ha_port" =~ ^[0-9]+$ ]] || ! [[ $ha_ssh_port =~ ^[0-9]+$ ]]; then
        akory -d 0.02  "error: port numbers must be valid integers ! ___ 😢"
        exit 1
    fi
    if ! ex_isip "$ha_proxy"; then
        akory -d 0.02 "error: proxy is invalid ! ___ 😢"
        exit 1
    fi
    
    # vscode
    jq -s ".[0] + {\"http.proxy\": \"http://"$ha_username":"$ha_encoded_password"@"$ha_proxy":"$ha_port"\", \"http.proxyKerberosServicePrincipal\": \"http://"$ha_username":"$ha_encoded_password"@"$ha_proxy":"$ha_port"\"}" "$ha_vscode" > temp && mv temp "$ha_vscode"
    akory -d 0.005 "vscode proxy enabled ... [done]"
    
    # git
    git config --global http.proxy "http://"$ha_username":"$ha_encoded_password"@"$ha_proxy":"$ha_port""
    git config --global https.proxy "http://"$ha_username":"$ha_encoded_password"@"$ha_proxy":"$ha_port""
    akory -d 0.005 "git proxy enabled ... [done]"
    
    # ssh
    echo "$ha_username":"$ha_password" > "$ha_sshauth"
    echo -e "
Host github.com
HostName ssh.github.com
Port $ha_ssh_port
ProxyCommand /usr/bin/corkscrew "$ha_proxy" "$ha_port" %h %p "$ha_sshauth"
    " > "$ha_sshconfig"
    akory -d 0.005 "ssh proxy configured ... [done]"
    
    # set access
    ex_ssh_access
    ex_access
    
    # clear
    unset ha_proxy
    unset ha_port
    unset ha_ssh_port
    unset ha_username
    unset ha_password
    unset ha_encoded_password
}

function ha_stop() {
    # vscode
    jq 'del(.["http.proxy"], .["http.proxyKerberosServicePrincipal"])' "$ha_vscode" > temp && mv temp "$ha_vscode"
    akory -d 0.005 "vscode proxy disabled ... [done]"
    
    # git
    git config --global --unset http.proxy
    git config --global --unset https.proxy
    akory -d 0.005 "git proxy disabled ... [done]"
    
    # ssh
    if [ -e "$ha_sshconfig" ] || [ -e "$ha_sshauth" ]; then
        rm -r "$ha_sshconfig" "$ha_sshauth"
        akory -d 0.005 "ssh proxy deleted ... [done]"
    fi
}

function ha_status() {
    local is_ssh_running=true
    
    # vscode
    if grep -q "http.proxy" "$ha_vscode"; then
        tail -n 5 "$ha_vscode" | bat && akory -d 0.005 "vscode proxy is enabled ! ___ 🗹"
    else
        akory -d 0.005 "vscode proxy is disabled ! ___ 😢"
    fi
    
    # git
    if grep -q "proxy" "$ha_gitconfig"; then
        bat "$ha_gitconfig" && akory -d 0.005 "git proxy is enabled ! ___ 🗹"
    else
        akory -d 0.005 "git proxy is disabled ! ___ 😢"
    fi
    
    # ssh
    if [ -e "$ha_sshconfig" ]; then
        bat "$ha_sshauth" && bat "$ha_sshconfig" && akory -d 0.005 "ssh proxy is configured ! ___ 🗹"
    else
        is_ssh_running=false
        akory -d 0.005 "no ssh proxy configuration found ! ___ 😢"
    fi
    
    # show list
    if [ "$is_ssh_running" == "true" ]; then ex_ssh_list; fi
    ex_list
}

function ha_clip() {
    # define
    local ha_proxy="$HA_PROXY"
    local ha_port="$HA_PORT"
    local ha_username="$HA_USERNAME"
    local ha_password="$HA_PASSWORD"
    
    # xclip
    echo "--proxy-server=http://"$ha_username":"$ha_password"@"$ha_proxy":"$ha_port"" | xclip -selection clipboard
    akory -d 0.005 "proxy server copied to clipboard ... [done]"
}

function ha_check() {
    # env check
    if [ ! -e "$ha_env" ]; then
        akory -d 0.005 "error: env file is missing ! ___ 😢"
        akory -d 0.005 "you can fix it with ha-proxy --fix"
        exit 1
    fi
    required_variables=("HA_VSCODE" "HA_GITCONFIG" "HA_SSHAUTH" "HA_SSHCONFIG" "HA_ENV" "HA_PROXY" "HA_PORT" "HA_SSH_PORT" "HA_USERNAME" "HA_PASSWORD")
    for var in "${required_variables[@]}"; do
        if [ -z "${!var}" ]; then
            echo "error: $var variable not set in .env file ! ___ 😢"
            exit 1
        fi
    done
    
    # deps check
    dependencies=("akory" "xxd" "jq" "git" "xclip" "corkscrew" "gedit" "bat")
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" > /dev/null 2>&1; then
            echo "error: '$dep' is not installed ! ___ 😢"
            exit 1
        fi
    done
    
    akory -d 0.02 "all dependencies and configurations are OK ! ___ 😍"
}

function ha_env() {
    if [ -e "$ha_env" ]; then
        gedit "$ha_env"
    else
        akory -d 0.02 "error: $ha_env not found ! ___ 😢"
    fi
}

function ha_ssh() {
    akory -d 0.02 "Enter your email address, SSH will use the address as a label for the key ..."
    read -p "EMAIL > " email
    ssh-keygen -t rsa -b 4096 -C "$email"
    akory -d 0.02 "ssh-key (private|public) created ... [done]"
}

function ha_fix() {
    cd $HOME
    echo -e "
# files
HA_VSCODE=\"$HOME/.config/Code - Insiders/User/settings.json\"
HA_GITCONFIG=\"$HOME/.gitconfig\"
HA_SSHAUTH=\"$HOME/.ssh/auth\"
HA_SSHCONFIG=\"$HOME/.ssh/config\"
HA_ENV=\"$HOME/.ha_env\"

# config
HA_PROXY=\"0.0.0.0\"
HA_PORT=8080
HA_SSH_PORT=8080
HA_USERNAME=\"user\"
HA_PASSWORD=\"password\"
    " > .ha_env
    chmod 600 .ha_env
    akory -d 0.02 "env file fixed in $HOME ... [done]"
}

function ha_info() {
    akory -d 0.002 "
* Author: $author
* Description: $description
* Version: $version
    "
}

function ha_help() {
    echo -e "
* Version: $version
* Usage: ha-proxy [OPTIONS]

Options:
--start           Start automatic proxy configuration for HTTP, Git, VSCode, and SSH.
--stop            Unset all proxy configuration.
--status          Display the current status of proxy configuration.
--restart         Restart proxy configuration (stop and then start).
--clip            Copy proxy server information to the clipboard.
--check           Check for required variables and dependencies.
--env             Set environment variables.
--ssh             Generate new SSH (private|public) key.
--fix             Repair env file by regenerating it again in your home.
--version | -v    Display script version information.
--help    | -h    Display this help message.

Example: ha-proxy --start | ha-proxy -v | ha-proxy --env ...
    "
}

# [extras] ===============================

function ex_banner() {
    akory -d 0.0005 "
  _
 | |__   __ _       _ __  _ __ _____  ___   _
 | '_ \ / _  |_____| '_ \| '__/ _ \ \/ / | | |
 | | | | (_| |_____| |_) | | | (_) >  <| |_| |
 |_| |_|\__,_|     | .__/|_|  \___/_/\_\\__,  |
                   |_|                  |___/
    "
}

function ex_ssh_list() {
    ls -l "$ha_sshauth"
    ls -l "$ha_sshconfig"
}

function ex_list() {
    ls -l "$ha_vscode"
    ls -l "$ha_gitconfig"
    ls -l "$ha_env"
}

function ex_ssh_access() {
    chmod 600 "$ha_sshauth"
    chmod 600 "$ha_sshconfig"
}

function ex_access() {
    chmod 600 "$ha_vscode" # default: -rw-r--r-- | $USER:$USER
    chmod 600 "$ha_gitconfig" # default: -rw-r--r-- | $USER:$USER
    chmod 600 "$ha_env"
    akory -d 0.02 "set file access ... [done]"
}

function ex_urlencode() {
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-])
                printf "$c"
            ;;
            *)
                printf "$c" | xxd -p -c1 | while read x; do printf "%%%s" "$x"; done
            ;;
        esac
    done
}

function ex_isip() {
    local ip=$1
    local ip_regex='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'
    if [[ $ip =~ $ip_regex ]]; then
        return 0
    else
        return 1
    fi
}

# [main] =================================

function main() {
    case "$1" in
        --start) ex_banner && ha_start ;;
        --stop) ex_banner && ha_stop ;;
        --status) ex_banner && ha_status ;;
        --restart) ex_banner && ha_stop && ha_start ;;
        --clip) ex_banner && ha_clip ;;
        --check) ex_banner && ha_check ;;
        --env) ex_banner && ha_env ;;
        --ssh) ex_banner && ha_ssh ;;
        --fix) ex_banner && ha_fix ;;
        --version|-v) ex_banner && ha_info ;;
        --help|-h) ex_banner && ha_help ;;
        *)
            akory -d 0.02 "missing or invalid option for ha-proxy !"
            ex_banner && ha_help
            exit 1
        ;;
    esac
}

main "$@"